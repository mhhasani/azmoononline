# Generated by Django 3.1.7 on 2021-08-31 07:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=50, null=True, unique=True)),
                ('mellicode', models.CharField(max_length=10, unique=True, validators=[django.core.validators.MinLengthValidator(10)])),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Azmoon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('Question_number', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('address', models.CharField(default='oecdgp2roq', max_length=200)),
                ('participant_number', models.IntegerField(default=0)),
                ('azmoon_number', models.IntegerField(default=0)),
                ('owner', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Q_text', models.TextField()),
                ('Q_image', models.ImageField(blank=True, upload_to='')),
                ('answer1', models.CharField(default='گزینه 1', max_length=200, null=True)),
                ('answer2', models.CharField(default='گزینه 2', max_length=200, null=True)),
                ('answer3', models.CharField(default='گزینه 3', max_length=200, null=True)),
                ('answer4', models.CharField(default='گزینه 4', max_length=200, null=True)),
                ('correct_answer', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4')], max_length=1, null=True)),
                ('azmoon', models.ManyToManyField(blank=True, to='formapp.Azmoon')),
            ],
        ),
        migrations.CreateModel(
            name='Examiner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semat', models.CharField(choices=[('Ostad', 'Ostad'), ('daneshamoz', 'daneshamoz')], default='daneshamoz', max_length=200)),
                ('percent_score', models.FloatField(blank=True, default=0)),
                ('score', models.FloatField(blank=True, default=0)),
                ('rank', models.IntegerField(blank=True, default=0)),
                ('azmoon', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='formapp.azmoon')),
                ('partclass', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='formapp.class')),
                ('participant', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='azmoon',
            name='azmoonclass',
            field=models.ManyToManyField(blank=True, to='formapp.Class'),
        ),
        migrations.AddField(
            model_name='participant',
            name='azmoon',
            field=models.ManyToManyField(blank=True, to='formapp.Azmoon'),
        ),
        migrations.AddField(
            model_name='participant',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='participant',
            name='partclass',
            field=models.ManyToManyField(blank=True, to='formapp.Class'),
        ),
        migrations.AddField(
            model_name='participant',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
